<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text"/>
<xsl:strip-space elements="*"/>
<xsl:template match="/api">// Copyright (c) 2012 The Berkelium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// =========================================
// WARNING:
//   THIS FILE IS AUTOMATICALLY GENERATED!
//   !! ANY CHANGES WILL BE OVERWRITTEN !!
//
// See berkelium/berkelium-api/update.sh
// =========================================

#ifndef BERKELIUM_API_H_
#define BERKELIUM_API_H_
#pragma once

#include &lt;stdint.h&gt;

typedef int32_t bk_int32;
typedef int32_t bk_bool;
typedef const char* bk_string;

typedef bk_int32 BK_HostVersion;
typedef bk_int32 BK_HostExecutable;

#ifdef __cplusplus
extern "C" {
#endif
<xsl:apply-templates select="group"/>
#ifdef __cplusplus
}
#endif

#endif // BERKELIUM_API_H_
</xsl:template>

<!-- ============================================================= -->
<!-- Group                                                         -->
<!-- ============================================================= -->
<xsl:template match="group">
// =========================================
// <xsl:value-of select="@type"/><xsl:text> </xsl:text><xsl:value-of select="@name"/>
<xsl:if test="short">
//
// <xsl:value-of select="short"/>
</xsl:if>
// =========================================
<xsl:apply-templates select="entry"/>
</xsl:template>

<!-- ============================================================= -->
<!-- Arguments                                                     -->
<!-- ============================================================= -->
<xsl:template name="arguments">
	<xsl:if test="not(@static='true')">
		<xsl:text>BK_</xsl:text>
		<xsl:value-of select="../@name"/>
		<xsl:text> self</xsl:text>
	</xsl:if>
	<xsl:if test="arg">
		<xsl:text>, </xsl:text>
	</xsl:if>
	<xsl:for-each select="arg">
		<xsl:call-template name="type">
			<xsl:with-param name="name" select="@type"/>
		</xsl:call-template>
		<xsl:text> </xsl:text>
		<xsl:value-of select="@name"/>
		<xsl:if test="position() != last()">
			<xsl:text>, </xsl:text>
		</xsl:if>
	</xsl:for-each>
</xsl:template>

<!-- ============================================================= -->
<!-- Functions                                                     -->
<!-- ============================================================= -->
<xsl:template match="entry" >
<xsl:if test="short">
	<xsl:text>
</xsl:text>
	<xsl:text>// </xsl:text>
	<xsl:value-of select="short"/>
	<xsl:text>
</xsl:text>
</xsl:if>
	<xsl:call-template name="type">
		<xsl:with-param name="name" select="@ret"/>
	</xsl:call-template>
	<xsl:text> BK_</xsl:text>
	<xsl:value-of select="../@name"/>_<xsl:value-of select="@name"/>(<xsl:call-template name="arguments"/>);
</xsl:template>

<!-- ============================================================= -->
<!-- Argument Types                                                -->
<!-- ============================================================= -->
<xsl:template name="type">
 	<xsl:param name="name" select="'Not Available'" />
	<xsl:variable name="node" select="/api/mapping[@type='c']/type[@name = $name]"/>
	<xsl:choose>
		<xsl:when test="$node">
			<xsl:choose>
				<xsl:when test="$node/@value">
					<xsl:value-of select="$node/@value"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:text>BK_</xsl:text>
					<xsl:value-of select="$name"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:when>
		<xsl:otherwise>
			!!ERROR: Type '<xsl:value-of select="$name"/>' not found!!
		</xsl:otherwise>
	</xsl:choose>
</xsl:template>

</xsl:stylesheet>
