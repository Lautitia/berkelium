CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

PROJECT(berkelium-java)

IF(NOT DEFINED BERKELIUM_BUILD)
	MESSAGE(FATAL_ERROR "this project should be build using berkelium build system!")
ENDIF()

IF(NOT DEFINED ENV{JDK_HOME})
	MESSAGE(FATAL_ERROR "JDK_HOME not set!")
ENDIF()

SET(JAVAC "$ENV{JDK_HOME}/bin/javac" CACHE FILEPATH "javac")
SET(JAVAH "$ENV{JDK_HOME}/bin/javah" CACHE FILEPATH "javah")

SET(BERKELIUM_JAVA_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/main/java CACHE PATH "berkelium java src")
SET(BERKELIUM_JAVA_JNI ${CMAKE_CURRENT_BINARY_DIR}/jni CACHE PATH "berkelium java jni includes")
SET(BERKELIUM_JAVA_TMP ${CMAKE_CURRENT_BINARY_DIR}/java-tmp CACHE PATH "berkelium java tmp")
FILE(MAKE_DIRECTORY "${BERKELIUM_JAVA_TMP}")

SET(BERKELIUM_JAVA_JNI_HEADERS "")

FOREACH(SRC ${BERKELIUM_SRC_JAVA_IMPL})
	# JAVAC_TARGET
	STRING(REGEX REPLACE ".java" ".class" JAVAC_TARGET ${SRC})

	# JAVAH_TARGET
	STRING(REGEX REPLACE ".java" ".h" JAVAH_TARGET ${SRC})
	STRING(REGEX REPLACE "/" "_" JAVAH_TARGET ${JAVAH_TARGET})

	# JAVA_CLASS_NAME
	STRING(REGEX REPLACE ".java" "" JAVA_CLASS_NAME ${SRC})
	STRING(REGEX REPLACE "/" "." JAVA_CLASS_NAME ${JAVA_CLASS_NAME})

	# add to jni header files
	LIST(APPEND BERKELIUM_JAVA_JNI_HEADERS jni/${JAVAH_TARGET})

	ADD_CUSTOM_COMMAND(
		OUTPUT ${BERKELIUM_JAVA_TMP}/${JAVAC_TARGET}
		COMMAND "${JAVAC}" -d "${BERKELIUM_JAVA_TMP}" -classpath "${BERKELIUM_JAVA_SRC}" "${BERKELIUM_JAVA_SRC}/${SRC}"
		COMMENT "Building Java Class ${JAVA_CLASS_NAME}"
	)

	ADD_CUSTOM_COMMAND(
		OUTPUT ${BERKELIUM_JAVA_JNI}/${JAVAH_TARGET}
		DEPENDS ${BERKELIUM_JAVA_TMP}/${JAVAC_TARGET}
		COMMAND "${JAVAH}" -d "${BERKELIUM_JAVA_JNI}" -classpath "${BERKELIUM_JAVA_TMP}" "${JAVA_CLASS_NAME}"
		COMMENT "Generating JNI Header ${JAVAH_TARGET}"
	)
ENDFOREACH()

INCLUDE_DIRECTORIES(${BERKELIUM_JAVA_JNI} "../berkelium-c/include")

ADD_LIBRARY(berkelium-java SHARED ${BERKELIUM_JAVA_JNI_HEADERS} src/main/cpp/berkelium-jni.cpp)
TARGET_LINK_LIBRARIES(berkelium-java ${BERKELIUM_CPP_LIBS})
