// Copyright (c) 2013 The Berkelium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// =========================================
// WARNING:
//   THIS FILE IS AUTOMATICALLY GENERATED!
//   !! ANY CHANGES WILL BE OVERWRITTEN !!
//
// See berkelium/berkelium-api/update.sh
// =========================================

#include "org_berkelium_impl_HostVersionImpl.h"
#include "org_berkelium_impl_BerkeliumFactoryImpl.h"
#include "org_berkelium_impl_RuntimeImpl.h"
#include "org_berkelium_impl_HostExecutableImpl.h"
#include "org_berkelium_impl_ProfileImpl.h"
#include "org_berkelium_impl_LoggerImpl.h"
#include "org_berkelium_impl_LogDelegateImpl.h"
#include "org_berkelium_impl_HostDelegateImpl.h"
#include "org_berkelium_impl_InstanceImpl.h"
#include "org_berkelium_impl_WindowImpl.h"
#include "org_berkelium_impl_WindowDelegateImpl.h"
#include "org_berkelium_impl_TabImpl.h"
#include "org_berkelium_impl_TabDelegateImpl.h"

#include "berkelium.h"

#include <stdlib.h>
#include <string.h>

inline jobject bk_new_JNI_BerkeliumFactory(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/BerkeliumFactoryImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "()V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_HostDelegate(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/HostDelegateImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "()V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_HostExecutable(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/HostExecutableImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "()V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_HostVersion(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/HostVersionImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "()V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_Instance(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/InstanceImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "()V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_LogDelegate(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/LogDelegateImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "()V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_LogSource(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/LogSourceImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "()V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_LogType(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/LogTypeImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "()V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_Logger(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/LoggerImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "()V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_Profile(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/ProfileImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "()V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_Rect(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/RectImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "()V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_Runtime(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/RuntimeImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "()V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_Tab(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/TabImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "()V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_TabDelegate(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/TabDelegateImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "()V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_Window(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/WindowImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "()V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_WindowDelegate(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/WindowDelegateImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "()V");
	return env->NewObject(cls, ctor);
}

// =========================================
//
//	Berkelium to JNI #defines
//
// =========================================

#define BK_TO_JOBECT(X) (jobject)(X)
#define BK_TO_JBOOLEAN(X) ((X) ? JNI_TRUE : JNI_FALSE)

inline jstring BK_TO_JSTRING(JNIEnv* env, char* str)
{
	if(str == NULL) {
		return NULL;
	}
	jstring ret = (jstring)env->NewGlobalRef(env->NewStringUTF(str));
	free(str);
	return ret;
}

inline char* JSTRING_TO_BK(JNIEnv* env, jstring str)
{
	if(str == NULL) {
		return NULL;
	}
	jboolean iscopy = false;
	const char* tmp = env->GetStringUTFChars(str, &iscopy);
	jint len = env->GetStringUTFLength(str);
	char* ret = (char*)malloc(len);
	memcpy(ret, tmp, len);
	env->ReleaseStringUTFChars(str, tmp);
	return ret;
}

inline BK_LogSource LogSource_TO_BK(JNIEnv* env, jobject instance)
{
	jclass cls = env->FindClass("org/berkelium/api/LogSource");

	jmethodID ordinal(env->GetMethodID(cls, "ordinal", "()I"));
	return (BK_LogSource)env->CallIntMethod(instance, ordinal);
}

inline BK_LogType LogType_TO_BK(JNIEnv* env, jobject instance)
{
	jclass cls = env->FindClass("org/berkelium/api/LogType");

	jmethodID ordinal(env->GetMethodID(cls, "ordinal", "()I"));
	return (BK_LogType)env->CallIntMethod(instance, ordinal);
}

// =========================================
//
//	BerkeliumFactory
//
// =========================================

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_BerkeliumFactoryImpl_createRuntime(JNIEnv* env, jobject _this)
{
	return BK_TO_JOBECT(BK_BerkeliumFactory_createRuntime());
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_BerkeliumFactoryImpl_getDefaultRuntime(JNIEnv* env, jobject _this)
{
	return BK_TO_JOBECT(BK_BerkeliumFactory_getDefaultRuntime());
}

// =========================================
//
//	HostExecutable
//
// =========================================

JNIEXPORT jstring JNICALL Java_org_berkelium_impl_HostExecutableImpl_getPath(JNIEnv* env, jobject _this)
{
	return BK_TO_JSTRING(env, BK_HostExecutable_getPath((BK_HostExecutable)_this));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_HostExecutableImpl_getRuntime(JNIEnv* env, jobject _this)
{
	return BK_TO_JOBECT(BK_HostExecutable_getRuntime((BK_HostExecutable)_this));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_HostExecutableImpl_getVersion(JNIEnv* env, jobject _this)
{
	return BK_TO_JOBECT(BK_HostExecutable_getVersion((BK_HostExecutable)_this));
}

// =========================================
//
//	HostVersion
//
// =========================================

JNIEXPORT jint JNICALL Java_org_berkelium_impl_HostVersionImpl_getBuild(JNIEnv* env, jobject _this)
{
	return BK_HostVersion_getBuild((BK_HostVersion)_this);
}

JNIEXPORT jint JNICALL Java_org_berkelium_impl_HostVersionImpl_getMajor(JNIEnv* env, jobject _this)
{
	return BK_HostVersion_getMajor((BK_HostVersion)_this);
}

JNIEXPORT jint JNICALL Java_org_berkelium_impl_HostVersionImpl_getMinor(JNIEnv* env, jobject _this)
{
	return BK_HostVersion_getMinor((BK_HostVersion)_this);
}

JNIEXPORT jint JNICALL Java_org_berkelium_impl_HostVersionImpl_getPatch(JNIEnv* env, jobject _this)
{
	return BK_HostVersion_getPatch((BK_HostVersion)_this);
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_HostVersionImpl_getRuntime(JNIEnv* env, jobject _this)
{
	return BK_TO_JOBECT(BK_HostVersion_getRuntime((BK_HostVersion)_this));
}

JNIEXPORT jstring JNICALL Java_org_berkelium_impl_HostVersionImpl_getVersionString(JNIEnv* env, jobject _this)
{
	return BK_TO_JSTRING(env, BK_HostVersion_getVersionString((BK_HostVersion)_this));
}

JNIEXPORT jboolean JNICALL Java_org_berkelium_impl_HostVersionImpl_isMinVersion(JNIEnv* env, jobject _this, jstring version)
{
	return BK_TO_JBOOLEAN(BK_HostVersion_isMinVersion((BK_HostVersion)_this, JSTRING_TO_BK(env, version)));
}

// =========================================
//
//	Instance
//
// =========================================

JNIEXPORT void JNICALL Java_org_berkelium_impl_InstanceImpl_addHostDelegate(JNIEnv* env, jobject _this, jobject delegate)
{
	BK_Instance_addHostDelegate((BK_Instance)_this, (BK_HostDelegate)delegate);
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_InstanceImpl_close(JNIEnv* env, jobject _this)
{
	BK_Instance_close((BK_Instance)_this);
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_InstanceImpl_createWindow(JNIEnv* env, jobject _this, jboolean incognito)
{
	return BK_TO_JOBECT(BK_Instance_createWindow((BK_Instance)_this, incognito));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_InstanceImpl_getExecutable(JNIEnv* env, jobject _this)
{
	return BK_TO_JOBECT(BK_Instance_getExecutable((BK_Instance)_this));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_InstanceImpl_getProfile(JNIEnv* env, jobject _this)
{
	return BK_TO_JOBECT(BK_Instance_getProfile((BK_Instance)_this));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_InstanceImpl_getRuntime(JNIEnv* env, jobject _this)
{
	return BK_TO_JOBECT(BK_Instance_getRuntime((BK_Instance)_this));
}

JNIEXPORT jint JNICALL Java_org_berkelium_impl_InstanceImpl_getWindowCount(JNIEnv* env, jobject _this)
{
	return BK_Instance_getWindowCount((BK_Instance)_this);
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_InstanceImpl_getWindowList(JNIEnv* env, jobject _this)
{
	return BK_TO_JOBECT(BK_Instance_getWindowList((BK_Instance)_this));
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_InstanceImpl_internalUpdate(JNIEnv* env, jobject _this)
{
	BK_Instance_internalUpdate((BK_Instance)_this);
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_InstanceImpl_removeHostDelegate(JNIEnv* env, jobject _this, jobject delegate)
{
	BK_Instance_removeHostDelegate((BK_Instance)_this, (BK_HostDelegate)delegate);
}

// =========================================
//
//	Profile
//
// =========================================

JNIEXPORT jstring JNICALL Java_org_berkelium_impl_ProfileImpl_getApplicationName(JNIEnv* env, jobject _this)
{
	return BK_TO_JSTRING(env, BK_Profile_getApplicationName((BK_Profile)_this));
}

JNIEXPORT jstring JNICALL Java_org_berkelium_impl_ProfileImpl_getProfilePath(JNIEnv* env, jobject _this)
{
	return BK_TO_JSTRING(env, BK_Profile_getProfilePath((BK_Profile)_this));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_ProfileImpl_getRuntime(JNIEnv* env, jobject _this)
{
	return BK_TO_JOBECT(BK_Profile_getRuntime((BK_Profile)_this));
}

JNIEXPORT jboolean JNICALL Java_org_berkelium_impl_ProfileImpl_isFound(JNIEnv* env, jobject _this)
{
	return BK_TO_JBOOLEAN(BK_Profile_isFound((BK_Profile)_this));
}

JNIEXPORT jboolean JNICALL Java_org_berkelium_impl_ProfileImpl_isInUse(JNIEnv* env, jobject _this)
{
	return BK_TO_JBOOLEAN(BK_Profile_isInUse((BK_Profile)_this));
}

JNIEXPORT jboolean JNICALL Java_org_berkelium_impl_ProfileImpl_isLocked(JNIEnv* env, jobject _this)
{
	return BK_TO_JBOOLEAN(BK_Profile_isLocked((BK_Profile)_this));
}

JNIEXPORT jboolean JNICALL Java_org_berkelium_impl_ProfileImpl_isSameVersion(JNIEnv* env, jobject _this)
{
	return BK_TO_JBOOLEAN(BK_Profile_isSameVersion((BK_Profile)_this));
}

JNIEXPORT jboolean JNICALL Java_org_berkelium_impl_ProfileImpl_isTooNew(JNIEnv* env, jobject _this)
{
	return BK_TO_JBOOLEAN(BK_Profile_isTooNew((BK_Profile)_this));
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_ProfileImpl_setLocked(JNIEnv* env, jobject _this, jboolean locked)
{
	BK_Profile_setLocked((BK_Profile)_this, locked);
}

// =========================================
//
//	Runtime
//
// =========================================

JNIEXPORT void JNICALL Java_org_berkelium_impl_RuntimeImpl_addLogDelegate(JNIEnv* env, jobject _this, jobject delegate)
{
	BK_Runtime_addLogDelegate((BK_Runtime)_this, (BK_LogDelegate)delegate);
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_RuntimeImpl_createTemporaryProfile(JNIEnv* env, jobject _this)
{
	return BK_TO_JOBECT(BK_Runtime_createTemporaryProfile((BK_Runtime)_this));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_RuntimeImpl_forExecutable(JNIEnv* env, jobject _this, jstring pathTo)
{
	return BK_TO_JOBECT(BK_Runtime_forExecutable((BK_Runtime)_this, JSTRING_TO_BK(env, pathTo)));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_RuntimeImpl_forProfile(JNIEnv* env, jobject _this, jstring application)
{
	return BK_TO_JOBECT(BK_Runtime_forProfile((BK_Runtime)_this, JSTRING_TO_BK(env, application)));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_RuntimeImpl_forProfilePath(JNIEnv* env, jobject _this, jstring path)
{
	return BK_TO_JOBECT(BK_Runtime_forProfilePath((BK_Runtime)_this, JSTRING_TO_BK(env, path)));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_RuntimeImpl_forSystemInstalled(JNIEnv* env, jobject _this)
{
	return BK_TO_JOBECT(BK_Runtime_forSystemInstalled((BK_Runtime)_this));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_RuntimeImpl_forVersion__Ljava_lang_String_2(JNIEnv* env, jobject _this, jstring version)
{
	return BK_TO_JOBECT(BK_Runtime_forVersionS((BK_Runtime)_this, JSTRING_TO_BK(env, version)));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_RuntimeImpl_forVersion__IIII(JNIEnv* env, jobject _this, jint vMajor, jint vMinor, jint vBuild, jint vPatch)
{
	return BK_TO_JOBECT(BK_Runtime_forVersion4I((BK_Runtime)_this, vMajor, vMinor, vBuild, vPatch));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_RuntimeImpl_getChromeProfile(JNIEnv* env, jobject _this)
{
	return BK_TO_JOBECT(BK_Runtime_getChromeProfile((BK_Runtime)_this));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_RuntimeImpl_getChromiumProfile(JNIEnv* env, jobject _this)
{
	return BK_TO_JOBECT(BK_Runtime_getChromiumProfile((BK_Runtime)_this));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_RuntimeImpl_getLogger(JNIEnv* env, jobject _this, jstring clazz, jstring name)
{
	return BK_TO_JOBECT(BK_Runtime_getLogger((BK_Runtime)_this, JSTRING_TO_BK(env, clazz), JSTRING_TO_BK(env, name)));
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_RuntimeImpl_log(JNIEnv* env, jobject _this, jobject source, jobject type, jstring clazz, jstring name, jstring message)
{
	BK_Runtime_log((BK_Runtime)_this, LogSource_TO_BK(env, source), LogType_TO_BK(env, type), JSTRING_TO_BK(env, clazz), JSTRING_TO_BK(env, name), JSTRING_TO_BK(env, message));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_RuntimeImpl_open(JNIEnv* env, jobject _this, jobject executable, jobject profile)
{
	return BK_TO_JOBECT(BK_Runtime_open((BK_Runtime)_this, (BK_HostExecutable)executable, (BK_Profile)profile));
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_RuntimeImpl_removeLogDelegate(JNIEnv* env, jobject _this, jobject delegate)
{
	BK_Runtime_removeLogDelegate((BK_Runtime)_this, (BK_LogDelegate)delegate);
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_RuntimeImpl_setDefaultExecutable(JNIEnv* env, jobject _this, jstring pathTo)
{
	BK_Runtime_setDefaultExecutable((BK_Runtime)_this, JSTRING_TO_BK(env, pathTo));
}

// =========================================
//
//	Tab
//
// =========================================

JNIEXPORT void JNICALL Java_org_berkelium_impl_TabImpl_addTabDelegate(JNIEnv* env, jobject _this, jobject delegate)
{
	BK_Tab_addTabDelegate((BK_Tab)_this, (BK_TabDelegate)delegate);
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_TabImpl_close(JNIEnv* env, jobject _this)
{
	BK_Tab_close((BK_Tab)_this);
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_TabImpl_getRuntime(JNIEnv* env, jobject _this)
{
	return BK_TO_JOBECT(BK_Tab_getRuntime((BK_Tab)_this));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_TabImpl_getTabDelegate(JNIEnv* env, jobject _this)
{
	return BK_TO_JOBECT(BK_Tab_getTabDelegate((BK_Tab)_this));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_TabImpl_getWindow(JNIEnv* env, jobject _this)
{
	return BK_TO_JOBECT(BK_Tab_getWindow((BK_Tab)_this));
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_TabImpl_internalUpdate(JNIEnv* env, jobject _this)
{
	BK_Tab_internalUpdate((BK_Tab)_this);
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_TabImpl_navigateTo(JNIEnv* env, jobject _this, jstring url)
{
	BK_Tab_navigateTo((BK_Tab)_this, JSTRING_TO_BK(env, url));
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_TabImpl_removeTabDelegate(JNIEnv* env, jobject _this, jobject delegate)
{
	BK_Tab_removeTabDelegate((BK_Tab)_this, (BK_TabDelegate)delegate);
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_TabImpl_resize(JNIEnv* env, jobject _this, jint width, jint height)
{
	BK_Tab_resize((BK_Tab)_this, width, height);
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_TabImpl_sync(JNIEnv* env, jobject _this)
{
	BK_Tab_sync((BK_Tab)_this);
}

// =========================================
//
//	Window
//
// =========================================

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_WindowImpl_createTab(JNIEnv* env, jobject _this)
{
	return BK_TO_JOBECT(BK_Window_createTab((BK_Window)_this));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_WindowImpl_getInstance(JNIEnv* env, jobject _this)
{
	return BK_TO_JOBECT(BK_Window_getInstance((BK_Window)_this));
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_WindowImpl_getRuntime(JNIEnv* env, jobject _this)
{
	return BK_TO_JOBECT(BK_Window_getRuntime((BK_Window)_this));
}

JNIEXPORT jint JNICALL Java_org_berkelium_impl_WindowImpl_getTabCount(JNIEnv* env, jobject _this)
{
	return BK_Window_getTabCount((BK_Window)_this);
}

JNIEXPORT jobject JNICALL Java_org_berkelium_impl_WindowImpl_getTabList(JNIEnv* env, jobject _this)
{
	return BK_TO_JOBECT(BK_Window_getTabList((BK_Window)_this));
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_WindowImpl_internalUpdate(JNIEnv* env, jobject _this)
{
	BK_Window_internalUpdate((BK_Window)_this);
}

JNIEXPORT jboolean JNICALL Java_org_berkelium_impl_WindowImpl_isIncognito(JNIEnv* env, jobject _this)
{
	return BK_TO_JBOOLEAN(BK_Window_isIncognito((BK_Window)_this));
}

JNIEXPORT void JNICALL Java_org_berkelium_impl_WindowImpl_moveTo(JNIEnv* env, jobject _this, jobject tab, jint index)
{
	BK_Window_moveTo((BK_Window)_this, (BK_Tab)tab, index);
}

