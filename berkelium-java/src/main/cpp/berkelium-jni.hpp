// Copyright (c) 2013 The Berkelium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef BERKELIUM_JNI_HPP_
#define BERKELIUM_JNI_HPP_

// =========================================
// WARNING:
//   THIS FILE IS AUTOMATICALLY GENERATED!
//   !! ANY CHANGES WILL BE OVERWRITTEN !!
//
// See berkelium/berkelium-api/update.sh
// =========================================

#ifdef __cplusplus
extern "C" {
#endif

#include "org_berkelium_impl_HostVersionImpl.h"
#include "org_berkelium_impl_BerkeliumFactoryImpl.h"
#include "org_berkelium_impl_RuntimeImpl.h"
#include "org_berkelium_impl_HostExecutableImpl.h"
#include "org_berkelium_impl_ProfileImpl.h"
#include "org_berkelium_impl_LoggerImpl.h"
#include "org_berkelium_impl_LogDelegateImpl.h"
#include "org_berkelium_impl_HostDelegateImpl.h"
#include "org_berkelium_impl_InstanceImpl.h"
#include "org_berkelium_impl_WindowImpl.h"
#include "org_berkelium_impl_WindowDelegateImpl.h"
#include "org_berkelium_impl_TabImpl.h"
#include "org_berkelium_impl_TabDelegateImpl.h"

inline jobject bk_new_JNI_BerkeliumFactory(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/BerkeliumFactoryImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_HostDelegate(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/HostDelegateImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_HostExecutable(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/HostExecutableImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_HostVersion(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/HostVersionImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_Instance(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/InstanceImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_LogDelegate(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/LogDelegateImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_LogSource(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/LogSourceImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_LogType(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/LogTypeImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_Logger(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/LoggerImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_Profile(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/ProfileImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_Rect(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/RectImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_Runtime(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/RuntimeImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_Tab(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/TabImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_TabDelegate(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/TabDelegateImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_Window(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/WindowImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "V");
	return env->NewObject(cls, ctor);
}

inline jobject bk_new_JNI_WindowDelegate(JNIEnv* env)
{
	jclass cls = env->FindClass("org/berkelium/impl/WindowDelegateImpl");
	jmethodID ctor = env->GetMethodID(cls, "<init>", "V");
	return env->NewObject(cls, ctor);
}


#ifdef __cplusplus
}
#endif
#endif // BERKELIUM_JNI_HPP_
