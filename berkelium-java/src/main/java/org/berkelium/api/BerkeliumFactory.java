// Copyright (c) 2012 The Berkelium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package org.berkelium.api;

// =========================================
// WARNING:
//   THIS FILE IS AUTOMATICALLY GENERATED!
//   !! ANY CHANGES WILL BE OVERWRITTEN !!
//
// See berkelium/berkelium-api/update.sh
// =========================================

public abstract class BerkeliumFactory {
	private static BerkeliumFactory instance;

	public synchronized static BerkeliumFactory getInstance() {
		if(instance == null) {
			try {
				Class<?> c = BerkeliumFactory.class.getClassLoader().loadClass(
					"org.berkelium.impl.BerkeliumFactoryImpl");
				instance = (BerkeliumFactory)c.getConstructor().newInstance();
			} catch (Exception ex) {
				throw new RuntimeException(ex);
			}
		}
		return instance;
	}
		
	// Creates an HostExecutable Object representing the given executable.
	public abstract HostExecutable forExecutable(String pathTo);

	// Creates an HostExecutable, the exectuable is searched through system path or system configuration (e.g. registry on windows)
	public abstract HostExecutable forSystemInstalled();

	// Returns the default profile for the given application name. A profile can only be held open by one instance at the same time . An exception is thrown of the profile is already be used.
	public abstract Profile forProfile(String application);

	// As above, but instead the given profile is used.
	public abstract Profile forProfile(String application, String profile);

	// Returns a Profile object representing the given Google Chrome profile.
	public abstract Profile forChromeProfile(String profile);

	// As above, but instead the default profile is used.
	public abstract Profile forChromeProfile();

	// Creates a temporary profile that gets automatically removed after use.
	public abstract Profile createTemporaryProfile();

	// Creates a HostVersion object representing the given version string.
	public abstract HostVersion forVersion(String version);

	// Creates a HostVersion object representing the given version number.
	public abstract HostVersion forVersion(int vMajor, int vMinor, int vBuild, int vPatch);

	// Launches a the given berkelium host process using the given profile.
	public abstract Instance open(HostExecutable executable, Profile profile);
}
