// Copyright (c) 2013 The Berkelium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package org.berkelium.api;

// =========================================
// WARNING:
//   THIS FILE IS AUTOMATICALLY GENERATED!
//   !! ANY CHANGES WILL BE OVERWRITTEN !!
//
// See berkelium/berkelium-api/update.sh
// =========================================

public interface Runtime extends BerkeliumObject  {

	// Processes all Pending Events. Waits up to timeout ms for new events.
	void update(int timeout);

	// Sets the Path to the HostExecutable Object used by forSystemInstalled.
	void setDefaultExecutable(String pathTo);

	// Creates an HostExecutable Object representing the given executable.
	HostExecutable forExecutable(String pathTo);

	// Creates an HostExecutable, the exectuable is searched through system path or system configuration (e.g. registry on windows)
	HostExecutable forSystemInstalled();

	// Returns the profile for the given application name.
	Profile forProfile(String application);

	// Returns a Profile object representing the Google Chrome profile.
	Profile getChromeProfile();

	// Returns a Profile object representing the Chromium profile.
	Profile getChromiumProfile();

	// Returns the profile located inside the given path.
	Profile forProfilePath(String path);

	// Creates a temporary profile that gets automatically removed after use.
	Profile createTemporaryProfile();

	// Creates a HostVersion object representing the given version string.
	HostVersion forVersion(String version);

	// Creates a HostVersion object representing the given version number.
	HostVersion forVersion(int vMajor, int vMinor, int vBuild, int vPatch);

	// Launches a the given berkelium host process using the given profile.
	Instance open(HostExecutable executable, Profile profile);

	Logger getLogger(String clazz, String name);

	// Add the given LogDelegate to this Instance.
	void addLogDelegate(LogDelegate delegate);

	// Remove the given LogDelegate from this Instance.
	void removeLogDelegate(LogDelegate delegate);

	// Forwards the given type/message to all log handlers attached to this instance.
	void log(LogSource source, LogType type, String clazz, String name, String message);

	// Error handler used by this instance.
	void handleThrowable(Throwable t);
}
