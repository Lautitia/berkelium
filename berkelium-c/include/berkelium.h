// Copyright (c) 2012 The Berkelium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef BERKELIUM_API_H_
#define BERKELIUM_API_H_
#pragma once

// =========================================
// WARNING:
//   THIS FILE IS AUTOMATICALLY GENERATED!
//   !! ANY CHANGES WILL BE OVERWRITTEN !!
//
// See berkelium/berkelium-api/update.sh
// =========================================

#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef int32_t bk_int32;
typedef int32_t bk_bool;
typedef const char* bk_string;

typedef bk_int32 BK_HostVersion;
typedef bk_int32 BK_HostExecutableFactory;
typedef bk_int32 BK_HostExecutable;
typedef bk_int32 BK_Profile;
typedef bk_int32 BK_Instance;

// =========================================
// interface HostVersion
// =========================================

// Returns the berkelium host version e.g. “22.0.1229.94”
bk_string BK_HostVersion_getVersionString(BK_HostVersion self);

// Returns the Major Version, e.g. “22”
bk_int32 BK_HostVersion_getMajor(BK_HostVersion self);

// Returns the Minor Version, always zero?
bk_int32 BK_HostVersion_getMinor(BK_HostVersion self);

// Returns the Build Version, e.g. “1229”
bk_int32 BK_HostVersion_getBuild(BK_HostVersion self);

// Returns the Patch Version, e.g. “94”
bk_int32 BK_HostVersion_getPatch(BK_HostVersion self);

// Returns true if the given Version is less or equal to the version of the executable represented by this executable object.
bk_bool BK_HostVersion_isMinVersion(BK_HostVersion self, bk_string version);

// =========================================
// class HostExecutableFactory
// =========================================

// Creates an HostExecutable Object representing the given executable.
BK_HostExecutable BK_HostExecutableFactory_forExecutable(bk_string pathTo);

// Creates an HostExecutable, the exectuable is searched through system path or system configuration (e.g. registry on windows)
BK_HostExecutable BK_HostExecutableFactory_forSystemInstalled();

// =========================================
// interface HostExecutable
//
// Represents a reference to the executable file of the berkelium host process.
// =========================================

// Returns the version of this berkelium host executable.
BK_HostVersion BK_HostExecutable_getVersion(BK_HostExecutable self);

// Returns the default profile for the given application name. A profile can only be held open by one instance at the same time . An exception is thrown of the profile is already be used.
BK_Profile BK_HostExecutable_forProfile(BK_HostExecutable self, bk_string application);

// As above, but instead the given profile is used.
BK_Profile BK_HostExecutable_forProfile(BK_HostExecutable self, bk_string application, bk_string profile);

// Creates a temporary profile that gets automatically removed after use.
BK_Profile BK_HostExecutable_createTemporaryProfile(BK_HostExecutable self);

// =========================================
// interface Profile
//
// Represents a berkelium profile on disk.
// =========================================

// Returns true if this profile is already in use.
bk_bool BK_Profile_isInUse(BK_Profile self);

// Returns true if this profile was found on disk.
bk_bool BK_Profile_isFound(BK_Profile self);

// Returns true if this profile can be used without updating this profile to a newer version.
bk_bool BK_Profile_isSameVersion(BK_Profile self);

// Returns true if this profile is from a newer berkelium host version.
bk_bool BK_Profile_isTooNew(BK_Profile self);

// Returns the name of the application or “berkelium” if not specified.
bk_string BK_Profile_getApplicationName(BK_Profile self);

// Returns the name of the profile or “default” if not specified.
bk_string BK_Profile_getProfileName(BK_Profile self);

// Returns the full path to the used Profile.
bk_string BK_Profile_getProfilePath(BK_Profile self);

// Launches a new berkelium host process using this profile.
BK_Instance BK_Profile_open(BK_Profile self);

// =========================================
// interface Instance
// =========================================

#ifdef __cplusplus
}
#endif

#endif // BERKELIUM_API_H_
