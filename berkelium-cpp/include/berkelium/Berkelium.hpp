// Copyright (c) 2012 The Berkelium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef BERKELIUM__HPP_
#define BERKELIUM__HPP_
#pragma once

// =========================================
// WARNING:
//   THIS FILE IS AUTOMATICALLY GENERATED!
//   !! ANY CHANGES WILL BE OVERWRITTEN !!
//
// See berkelium/berkelium-api/update.sh
// =========================================

#include <string>
#include <vector>
#include <memory>
#include <cstdint>

namespace Berkelium {

enum LogType {
	// Represents the stdout stream of the berkelium host process.
	HostOut,

	// Represents the stderr stream of the berkelium host process.
	HostErr,

	// Represents debug messages of the berkelium library.
	Debug,

	// Represents error messages of the berkelium library.
	Error,

};

class HostVersion;
typedef std::shared_ptr<HostVersion> HostVersionRef;

class BerkeliumFactory;
typedef std::shared_ptr<BerkeliumFactory> BerkeliumFactoryRef;

class HostExecutable;
typedef std::shared_ptr<HostExecutable> HostExecutableRef;

class Profile;
typedef std::shared_ptr<Profile> ProfileRef;

class LogDelegate;
typedef std::shared_ptr<LogDelegate> LogDelegateRef;

class HostDelegate;
typedef std::shared_ptr<HostDelegate> HostDelegateRef;

class Instance;
typedef std::shared_ptr<Instance> InstanceRef;

class Window;
typedef std::shared_ptr<Window> WindowRef;

class WindowDelegate;
typedef std::shared_ptr<WindowDelegate> WindowDelegateRef;

class Tab;
typedef std::shared_ptr<Tab> TabRef;

class TabDelegate;
typedef std::shared_ptr<TabDelegate> TabDelegateRef;

typedef std::vector<Window> WindowList;

typedef std::vector<Tab> TabList;

} // namespace Berkelium

#endif // BERKELIUM__HPP_
