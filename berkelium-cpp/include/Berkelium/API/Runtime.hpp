// Copyright (c) 2013 The Berkelium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef BERKELIUM_API_RUNTIME_HPP_
#define BERKELIUM_API_RUNTIME_HPP_
#pragma once

// =========================================
// WARNING:
//   THIS FILE IS AUTOMATICALLY GENERATED!
//   !! ANY CHANGES WILL BE OVERWRITTEN !!
//
// See berkelium/berkelium-api/update.sh
// =========================================

#include <Berkelium/API/Berkelium.hpp>

namespace Berkelium {

class Runtime {
protected:
	Runtime();

public:
	virtual ~Runtime() = 0;

	// String with object count debug informations.
	virtual const std::string getDebugObjectStats() = 0;

	// Processes all Pending Events. Waits up to timeout ms for new events.
	virtual void update(int32_t timeout) = 0;

	// Calls given update method after given timeout (in ms).
	virtual void addUpdateEvent(UpdateRef update, int32_t timeout) = 0;

	// Sets the Path to the HostExecutable Object used by forSystemInstalled.
	virtual void setDefaultExecutable(const std::string& pathTo) = 0;

	// Creates an HostExecutable Object representing the given executable.
	virtual HostExecutableRef forExecutable(const std::string& pathTo) = 0;

	// Creates an HostExecutable, the exectuable is searched through system path or system configuration (e.g. registry on windows)
	virtual HostExecutableRef forSystemInstalled() = 0;

	// Returns the profile for the given application name.
	virtual ProfileRef forProfile(const std::string& application) = 0;

	// Returns a Profile object representing the Google Chrome profile.
	virtual ProfileRef getChromeProfile() = 0;

	// Returns a Profile object representing the Chromium profile.
	virtual ProfileRef getChromiumProfile() = 0;

	// Returns the profile located inside the given path.
	virtual ProfileRef forProfilePath(const std::string& path) = 0;

	// Creates a temporary profile that gets automatically removed after use.
	virtual ProfileRef createTemporaryProfile() = 0;

	// Creates a HostVersion object representing the given version string.
	virtual HostVersionRef forVersion(const std::string& version) = 0;

	// Creates a HostVersion object representing the given version number.
	virtual HostVersionRef forVersion(int32_t vMajor, int32_t vMinor, int32_t vBuild, int32_t vPatch) = 0;

	// Launches a the given berkelium host process using the given profile.
	virtual InstanceRef open(HostExecutableRef executable, ProfileRef profile) = 0;
	virtual LoggerRef getLogger(const std::string& clazz, const std::string& name) = 0;

	// Add the given LogDelegate to this Instance.
	virtual void addLogDelegate(LogDelegateRef delegate) = 0;

	// Remove the given LogDelegate from this Instance.
	virtual void removeLogDelegate(LogDelegateRef delegate) = 0;

	// Forwards the given type/message to all log handlers attached to this instance.
	virtual void log(LogSource source, LogType type, const std::string& clazz, const std::string& name, const std::string& message) = 0;
};

} // namespace Berkelium

#endif // BERKELIUM_RUNTIME_HPP_
