// Copyright (c) 2013 The Berkelium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef BERKELIUM_API__HPP_
#define BERKELIUM_API__HPP_
#pragma once

// =========================================
// WARNING:
//   THIS FILE IS AUTOMATICALLY GENERATED!
//   !! ANY CHANGES WILL BE OVERWRITTEN !!
//
// See berkelium/berkelium-api/update.sh
// =========================================

#include <string>
#include <list>
#include <memory>
#include <cstdint>
#include <iostream>

namespace Berkelium {

class Rect {
};

enum LogSource {

	Host,


	Lib,

};

enum LogType {
	// Represents the stdout stream.
	StdOut,

	// Represents the stderr stream.
	StdErr,

	// Represents debug messages.
	Debug,

	// Represents info messages.
	Info,

	// Represents warn messages.
	Warn,

	// Represents error messages.
	Error,

};

class HostVersion;
typedef std::shared_ptr<HostVersion> HostVersionRef;
typedef std::weak_ptr<HostVersion> HostVersionWRef;

class BerkeliumFactory;
typedef std::shared_ptr<BerkeliumFactory> BerkeliumFactoryRef;
typedef std::weak_ptr<BerkeliumFactory> BerkeliumFactoryWRef;

class Runtime;
typedef std::shared_ptr<Runtime> RuntimeRef;
typedef std::weak_ptr<Runtime> RuntimeWRef;

class HostExecutable;
typedef std::shared_ptr<HostExecutable> HostExecutableRef;
typedef std::weak_ptr<HostExecutable> HostExecutableWRef;

class Profile;
typedef std::shared_ptr<Profile> ProfileRef;
typedef std::weak_ptr<Profile> ProfileWRef;

class Logger;
typedef std::shared_ptr<Logger> LoggerRef;
typedef std::weak_ptr<Logger> LoggerWRef;

class LogDelegate;
typedef std::shared_ptr<LogDelegate> LogDelegateRef;
typedef std::weak_ptr<LogDelegate> LogDelegateWRef;

class HostDelegate;
typedef std::shared_ptr<HostDelegate> HostDelegateRef;
typedef std::weak_ptr<HostDelegate> HostDelegateWRef;

class Instance;
typedef std::shared_ptr<Instance> InstanceRef;
typedef std::weak_ptr<Instance> InstanceWRef;

class Window;
typedef std::shared_ptr<Window> WindowRef;
typedef std::weak_ptr<Window> WindowWRef;

class WindowDelegate;
typedef std::shared_ptr<WindowDelegate> WindowDelegateRef;
typedef std::weak_ptr<WindowDelegate> WindowDelegateWRef;

class Tab;
typedef std::shared_ptr<Tab> TabRef;
typedef std::weak_ptr<Tab> TabWRef;

class TabDelegate;
typedef std::shared_ptr<TabDelegate> TabDelegateRef;
typedef std::weak_ptr<TabDelegate> TabDelegateWRef;

typedef std::list<WindowRef> WindowList;
typedef std::shared_ptr<WindowList> WindowListRef;

typedef std::list<TabRef> TabList;
typedef std::shared_ptr<TabList> TabListRef;

} // namespace Berkelium

#endif // BERKELIUM__HPP_
